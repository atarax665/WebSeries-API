// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/webseries.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeriesClient is the client API for Series service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeriesClient interface {
	GetAllSeries(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Series_GetAllSeriesClient, error)
	GetSeries(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SeriesInfo, error)
	AddSeries(ctx context.Context, in *SeriesInfo, opts ...grpc.CallOption) (*Id, error)
	UpdateSeries(ctx context.Context, in *SeriesInfo, opts ...grpc.CallOption) (*Status, error)
	DeleteSeries(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type seriesClient struct {
	cc grpc.ClientConnInterface
}

func NewSeriesClient(cc grpc.ClientConnInterface) SeriesClient {
	return &seriesClient{cc}
}

func (c *seriesClient) GetAllSeries(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Series_GetAllSeriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Series_ServiceDesc.Streams[0], "/moviesapp.Series/GetAllSeries", opts...)
	if err != nil {
		return nil, err
	}
	x := &seriesGetAllSeriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Series_GetAllSeriesClient interface {
	Recv() (*SeriesInfo, error)
	grpc.ClientStream
}

type seriesGetAllSeriesClient struct {
	grpc.ClientStream
}

func (x *seriesGetAllSeriesClient) Recv() (*SeriesInfo, error) {
	m := new(SeriesInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *seriesClient) GetSeries(ctx context.Context, in *Id, opts ...grpc.CallOption) (*SeriesInfo, error) {
	out := new(SeriesInfo)
	err := c.cc.Invoke(ctx, "/moviesapp.Series/GetSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesClient) AddSeries(ctx context.Context, in *SeriesInfo, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/moviesapp.Series/AddSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesClient) UpdateSeries(ctx context.Context, in *SeriesInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/moviesapp.Series/UpdateSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seriesClient) DeleteSeries(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/moviesapp.Series/DeleteSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeriesServer is the server API for Series service.
// All implementations must embed UnimplementedSeriesServer
// for forward compatibility
type SeriesServer interface {
	GetAllSeries(*Empty, Series_GetAllSeriesServer) error
	GetSeries(context.Context, *Id) (*SeriesInfo, error)
	AddSeries(context.Context, *SeriesInfo) (*Id, error)
	UpdateSeries(context.Context, *SeriesInfo) (*Status, error)
	DeleteSeries(context.Context, *Id) (*Status, error)
	mustEmbedUnimplementedSeriesServer()
}

// UnimplementedSeriesServer must be embedded to have forward compatible implementations.
type UnimplementedSeriesServer struct {
}

func (UnimplementedSeriesServer) GetAllSeries(*Empty, Series_GetAllSeriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllSeries not implemented")
}
func (UnimplementedSeriesServer) GetSeries(context.Context, *Id) (*SeriesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeries not implemented")
}
func (UnimplementedSeriesServer) AddSeries(context.Context, *SeriesInfo) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeries not implemented")
}
func (UnimplementedSeriesServer) UpdateSeries(context.Context, *SeriesInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeries not implemented")
}
func (UnimplementedSeriesServer) DeleteSeries(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeries not implemented")
}
func (UnimplementedSeriesServer) mustEmbedUnimplementedSeriesServer() {}

// UnsafeSeriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeriesServer will
// result in compilation errors.
type UnsafeSeriesServer interface {
	mustEmbedUnimplementedSeriesServer()
}

func RegisterSeriesServer(s grpc.ServiceRegistrar, srv SeriesServer) {
	s.RegisterService(&Series_ServiceDesc, srv)
}

func _Series_GetAllSeries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeriesServer).GetAllSeries(m, &seriesGetAllSeriesServer{stream})
}

type Series_GetAllSeriesServer interface {
	Send(*SeriesInfo) error
	grpc.ServerStream
}

type seriesGetAllSeriesServer struct {
	grpc.ServerStream
}

func (x *seriesGetAllSeriesServer) Send(m *SeriesInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Series_GetSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServer).GetSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moviesapp.Series/GetSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServer).GetSeries(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Series_AddSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServer).AddSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moviesapp.Series/AddSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServer).AddSeries(ctx, req.(*SeriesInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Series_UpdateSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServer).UpdateSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moviesapp.Series/UpdateSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServer).UpdateSeries(ctx, req.(*SeriesInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Series_DeleteSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeriesServer).DeleteSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moviesapp.Series/DeleteSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeriesServer).DeleteSeries(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Series_ServiceDesc is the grpc.ServiceDesc for Series service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Series_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moviesapp.Series",
	HandlerType: (*SeriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeries",
			Handler:    _Series_GetSeries_Handler,
		},
		{
			MethodName: "AddSeries",
			Handler:    _Series_AddSeries_Handler,
		},
		{
			MethodName: "UpdateSeries",
			Handler:    _Series_UpdateSeries_Handler,
		},
		{
			MethodName: "DeleteSeries",
			Handler:    _Series_DeleteSeries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllSeries",
			Handler:       _Series_GetAllSeries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/webseries.proto",
}
